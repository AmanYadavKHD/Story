📁 project_folder/
│
├── Data_Ingestion/
│   └── final_cleaned_ticker_data.json
│
├── main.py                  # To run everything
├── utils/
│   ├── __init__.py
│   ├── load_data.py         # Load data
│   ├── filter_data.py       # Filtering function
│   └── validate_data.py     # Validation script


# utils/load_data.py
import json
import os

def load_transcript_data(file_path='Data_Ingestion/final_cleaned_ticker_data.json'):
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"File not found: {file_path}")
    with open(file_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    return data


# utils/filter_data.py
def filter_transcripts(data, company=None, year=None, quarter=None, keyword=None):
    results = []
    for item in data:
        if company and company.lower() not in item['company'].lower():
            continue
        if year and int(item['year']) != int(year):
            continue
        if quarter and item['quarter'].upper() != quarter.upper():
            continue
        if keyword and keyword.lower() not in item['content'].lower():
            continue
        results.append(item)
    return results


# utils/validate_data.py
def validate_transcripts(data):
    required_fields = {'company', 'file_name', 'quarter', 'year', 'date', 'speaker', 'role', 'content'}
    errors = []
    for idx, item in enumerate(data):
        missing = required_fields - item.keys()
        if missing:
            errors.append(f"Item {idx} is missing fields: {missing}")
        elif not all(item[field] for field in required_fields):
            errors.append(f"Item {idx} has empty fields")
    return errors


# main.py
from utils.load_data import load_transcript_data
from utils.filter_data import filter_transcripts
from utils.validate_data import validate_transcripts

# Step 1: Load
data = load_transcript_data()

# Step 2: Validate
errors = validate_transcripts(data)
if errors:
    print("⚠️ Data validation errors found:")
    for err in errors:
        print(err)
    exit(1)
else:
    print("✅ Data is valid.\n")

# Step 3: Filter
results = filter_transcripts(data, company='Apple', year=2025, quarter='Q1', keyword='sales')

# Step 4: Show results
for res in results:
    print(f"{res['date']} - {res['speaker']} ({res['role']}):")
    print(res['content'])
    print('-' * 80)


